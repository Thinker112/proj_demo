server:
  port: 8081
spring:
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  application:
    name: springboot3-demo
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/ry-vue?useUnicode=true&characterEncoding=UTF8&rewriteBatchedStatements=true&serverTimezone=PRC&useSSL=false&allowMultiQueries=true
    username: root
    password: 1qaz!QAZ
  devtools:
    restart:
      enabled: false # 关闭热部署
  mvc:
    contentnegotiation:
      favor-parameter: true # 开启基于请求参数的内容协商功能。 默认参数名：format。 默认此功能不开启
      # parameter-name: format   # 指定内容协商时使用的参数名。默认是 format
      media-types:
        yaml: text/yaml
  rabbitmq:
    #username: admin
    #password: 1qaz!QAZ
    host: 127.0.0.1
    port: 5672
    listener:
      # SimpleMessageListenerContainer是最基本的监听容器之一，它是一个线程池，通过轮询的方式将消息分发给不同的消费者，每个消费者独立地处理自己所接收到的消息。
      # 它适用于并发消费者较少、消息量较少的场景。
      simple:
        #每个消息消费者从队列中预取一定数量的消息并将它们存储在缓存中，以便后续快速消费
        prefetch: 300
        acknowledge-mode: manual #消息签收模式
      # DirectMessageListenerContainer是在SimpleMessageListenerContainer的基础上，增加了使用RabbitMQ的推送机制将消息推送给消费者，而不是通过轮询的方式将消息分发给消费者。
      # 这种方式可以更加高效地处理消息，特别是在高并发、大量消息的场景下。需要注意的是，为了使用RabbitMQ的推送机制，需要将RabbitMQ的客户端配置参数prefetchCount设置为1，避免出现某个消费者快速处理完任务，但是其他消费者的任务仍在等待的情况。
      direct:
        prefetch: 1
    publisher-confirm-type: correlated #发布消息到交换机确认
    publisher-returns: true
    template:
      mandatory: true
  main:
    allow-circular-references: true
---
#logging:
#  level:
#    sql: debug
#    web: info #日志分组
#  file:
#    name: ./logs/springboot3-demo.log
#  logback:
#    rollingpolicy:
#      file-name-pattern: ${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz
#      max-file-size: 1MB
#      max-history: 10
mybatis:
  mapper-locations: classpath:mapper/*.xml